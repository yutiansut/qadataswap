name: Build Wheels

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04, macos-11, macos-12]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake pkg-config
        # Install Arrow from conda-forge for consistent versions
        wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
        bash Miniconda3-latest-Linux-x86_64.sh -b -p $HOME/miniconda
        source $HOME/miniconda/bin/activate
        conda install -c conda-forge arrow-cpp pyarrow -y

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install cmake arrow

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel twine
        pip install pybind11 numpy
        # Try to install Arrow dependencies
        pip install pyarrow polars || echo "Arrow installation failed, will build simple version"

    - name: Build wheel
      run: |
        cd src/python
        python -m build --wheel

    - name: Test wheel
      run: |
        cd src/python
        pip install dist/*.whl
        python -c "import qadataswap; print('Import successful:', qadataswap.get_version())"

    - name: Upload wheels
      uses: actions/upload-artifact@v3
      with:
        name: wheels-${{ matrix.os }}-py${{ matrix.python-version }}
        path: src/python/dist/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build

    - name: Build sdist
      run: |
        cd src/python
        python -m build --sdist

    - name: Upload sdist
      uses: actions/upload-artifact@v3
      with:
        name: sdist
        path: src/python/dist/*.tar.gz

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
    - uses: actions/download-artifact@v3
      with:
        path: dist

    - name: Flatten artifacts
      run: |
        mkdir -p final_dist
        find dist -name "*.whl" -exec cp {} final_dist/ \;
        find dist -name "*.tar.gz" -exec cp {} final_dist/ \;
        ls -la final_dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages_dir: final_dist/